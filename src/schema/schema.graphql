## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

""" @model """
type Comment {
  _id: GraphbackObjectID!
  text: String
  description: String

  """@manyToOne(field: 'comments', key: 'noteId')"""
  note: Note
}

input CommentFilter {
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
  noteId: GraphbackObjectIDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  and: [CommentSubscriptionFilter!]
  or: [CommentSubscriptionFilter!]
  not: CommentSubscriptionFilter
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
}

input CreateCommentInput {
  text: String
  description: String
  noteId: GraphbackObjectID
}

input CreateNoteInput {
  title: String!
  description: String
}

input CreateNutirtionInfoInput {
  calories: Int
  fat: Int
  carb: Int
  protein: Int
}

input CreateNutritionInput {
  dessert: String
  nutirtionInfoId: GraphbackObjectID
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutateCommentInput {
  _id: GraphbackObjectID!
  text: String
  description: String
  noteId: GraphbackObjectID
}

input MutateNoteInput {
  _id: GraphbackObjectID!
  title: String
  description: String
}

input MutateNutirtionInfoInput {
  _id: GraphbackObjectID!
  calories: Int
  fat: Int
  carb: Int
  protein: Int
}

input MutateNutritionInput {
  _id: GraphbackObjectID!
  dessert: String
  nutirtionInfoId: GraphbackObjectID
}

type Mutation {
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
  createNutrition(input: CreateNutritionInput!): Nutrition
  updateNutrition(input: MutateNutritionInput!): Nutrition
  deleteNutrition(input: MutateNutritionInput!): Nutrition
  createNutirtionInfo(input: CreateNutirtionInfoInput!): NutirtionInfo
  updateNutirtionInfo(input: MutateNutirtionInfoInput!): NutirtionInfo
  deleteNutirtionInfo(input: MutateNutirtionInfoInput!): NutirtionInfo
}

""" @model """
type Note {
  _id: GraphbackObjectID!
  title: String!
  description: String

  """
  @oneToMany(field: 'note', key: 'noteId')
  @oneToMany(field: 'note')
  """
  comments(filter: CommentFilter): [Comment]!
}

input NoteFilter {
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  and: [NoteSubscriptionFilter!]
  or: [NoteSubscriptionFilter!]
  not: NoteSubscriptionFilter
  _id: GraphbackObjectIDInput
  title: StringInput
  description: StringInput
}

""" @model """
type NutirtionInfo {
  _id: GraphbackObjectID!
  calories: Int
  fat: Int
  carb: Int
  protein: Int
}

input NutirtionInfoFilter {
  _id: GraphbackObjectIDInput
  calories: IntInput
  fat: IntInput
  carb: IntInput
  protein: IntInput
  and: [NutirtionInfoFilter!]
  or: [NutirtionInfoFilter!]
  not: NutirtionInfoFilter
}

type NutirtionInfoResultList {
  items: [NutirtionInfo]!
  offset: Int
  limit: Int
  count: Int
}

input NutirtionInfoSubscriptionFilter {
  and: [NutirtionInfoSubscriptionFilter!]
  or: [NutirtionInfoSubscriptionFilter!]
  not: NutirtionInfoSubscriptionFilter
  _id: GraphbackObjectIDInput
  calories: IntInput
  fat: IntInput
  carb: IntInput
  protein: IntInput
}

""" @model """
type Nutrition {
  _id: GraphbackObjectID!
  dessert: String

  """
  @oneToOne(key: 'nutirtionInfoId')
  @oneToOne
  """
  nutirtionInfo: NutirtionInfo
}

input NutritionFilter {
  _id: GraphbackObjectIDInput
  dessert: StringInput
  nutirtionInfoId: GraphbackObjectIDInput
  and: [NutritionFilter!]
  or: [NutritionFilter!]
  not: NutritionFilter
}

type NutritionResultList {
  items: [Nutrition]!
  offset: Int
  limit: Int
  count: Int
}

input NutritionSubscriptionFilter {
  and: [NutritionSubscriptionFilter!]
  or: [NutritionSubscriptionFilter!]
  not: NutritionSubscriptionFilter
  _id: GraphbackObjectIDInput
  dessert: StringInput
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getDraftNotes: [Note]
  getNote(id: GraphbackObjectID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getComment(id: GraphbackObjectID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
  getNutrition(id: GraphbackObjectID!): Nutrition
  findNutritions(filter: NutritionFilter, page: PageRequest, orderBy: OrderByInput): NutritionResultList!
  getNutirtionInfo(id: GraphbackObjectID!): NutirtionInfo
  findNutirtionInfos(filter: NutirtionInfoFilter, page: PageRequest, orderBy: OrderByInput): NutirtionInfoResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
  newNutrition(filter: NutritionSubscriptionFilter): Nutrition!
  updatedNutrition(filter: NutritionSubscriptionFilter): Nutrition!
  deletedNutrition(filter: NutritionSubscriptionFilter): Nutrition!
  newNutirtionInfo(filter: NutirtionInfoSubscriptionFilter): NutirtionInfo!
  updatedNutirtionInfo(filter: NutirtionInfoSubscriptionFilter): NutirtionInfo!
  deletedNutirtionInfo(filter: NutirtionInfoSubscriptionFilter): NutirtionInfo!
}